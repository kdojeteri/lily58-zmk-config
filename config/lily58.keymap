/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define FUNCT   1
#define SYMBOL  2
#define ACCENT  3

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  ENTER |  | ENTER |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | ALT  | GUI  | LOWER|  SPACE |  | SPACE | RAISE| BSPC  | GUI   |
            bindings = <
&mt GRAVE ESC  &mt F1 N1  &mt F2 N2  &mt F3 N3  &mt F4 N4  &mt F5 N5                      &mt F6 N6  &mt F7 N7  &mt F8 N8  &mt F9 N9  &mt F10 N0  &mt F11 BSLH
&kp TAB        &kp Q      &kp W      &kp E      &kp R      &kp T                          &kp Y      &kp U      &kp I      &kp O      &kp P       &mt F12 LBRK
&mo ACCENT     &kp A      &kp S      &kp D      &kp F      &kp G                          &kp H      &kp J      &kp K      &kp L      &kp RBRK    &mt PSCRN SLCK
&kp LSHFT      &kp Z      &kp X      &kp C      &kp V      &kp B    &kp RET    &kp RET    &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH    &mt PAUSE_BREAK SQT
                                     &kp LCTRL  &kp LGUI   &kp LALT &kp SPACE  &kp SPACE  &mo SYMBOL &mo FUNCT  &kp RCTRL
            >;
        };

        function_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
          bindings = <
&kp ESC      &kp F1       &kp F2     &kp F3     &kp F4        &kp F5                  &kp F6    &kp F7   &kp F8   &kp F9    &kp F10   &kp F11
&kp C_BRI_UP &kp C_VOL_UP &kp C_PP   &kp C_MUTE &kp C_AC_BACK &kp C_AC_FORWARD        &kp INS   &kp HOME &kp UP   &kp END   &kp PG_UP &kp F12
&kp C_BRI_DN &kp C_VOL_DN &kp C_PREV &kp C_NEXT &trans        &trans                  &trans    &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN &kp PSCRN
&trans       &trans       &trans     &trans     &trans        &trans &trans    &trans &kp K_APP &kp BSPC &kp DEL  &trans    &trans    &kp PAUSE_BREAK
                                     &trans     &trans        &trans &trans    &trans &trans    &trans   &trans
            >;

        }

        symbol_layer {
// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
// |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&kp RA(GRAVE) &kp RA(N1) &trans    &trans    &trans    &trans                        &kp LS(RBRK)  &kp RBRK    &kp RA(LBRK) &kp FSLH  &kp RA(RBRK) &kp LS(BSLH)
&trans        &kp RA(Q)  &kp RA(W) &kp RA(E) &trans    &trans                        &kp RA(F)     &kp RA(G)   &kp MINUS    &kp N1    &kp Q        &kp LS(LBRK)
&trans        &trans     &trans    &trans    &trans    &trans                        &kp RA(B)     &kp RA(N)   &kp RA(SEMI) &trans    &trans       &kp LS(SEMI)
&trans        &trans     &kp RA(X) &kp RA(C) &kp RA(V) &kp LS(MINUS) &trans  &trans  &kp RA(COMMA) &kp RA(DOT) &kp LS(FSLH) &trans    &trans       &kp RA(BSLH)
                                   &trans    &trans    &trans        &trans  &trans  &trans        &trans      &trans
            >;
        };

        accent_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&kp RA(GRAVE) &kp RA(N1)    &trans        &trans        &trans     &trans                  &kp NLCK   &kp KP_SLASH &kp KP_ASTERISK &kp KP_MINUS &trans    &trans
&trans        &kp RA(N7)    &kp RA(N3)    &kp LS(GRAVE) &kp BSLH   &kp RA(N0)              &kp KP_N7  &kp KP_N8    &kp KP_N9       &kp KP_PLUS  &trans    &trans
&trans        &kp LS(EQUAL) &kp RA(SQT)   &dstroke      &kp RA(N4) &kp RA(N8)              &kp KP_N4  &kp KP_N5    &kp KP_N6       &lstroke     &trans    &trans
&trans        &kp EQUAL     &kp RA(EQUAL) &kp RA(N6)    &trans     &trans  &trans  &trans  &kp KP_N1  &kp KP_N2    &kp KP_N3       &kp KP_ENTER &trans    &trans
                                          &trans        &trans     &trans  &trans  &trans  &trans     &kp KP_N0    &kp DOT
            >;
        };
    };

    dstroke: d_stroke {
        compatible = "zmk,behavior-mod-morph";
        label = "DSTROKE";
        #binding-cells = <0>;
        bindings = <&kp RA(S)>, <&kp RA(D)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

    lstroke: l_stroke {
        compatible = "zmk,behavior-mod-morph";
        label = "LSTROKE";
        #binding-cells = <0>;
        bindings = <&kp RA(K)>, <&kp RA(L)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
};
